#!/bin/sh

# Script made by Slymp for Akylonia.net
# Join us on discord.gg/7zbWQzU

# Configuration paths
user="steam"
ConanPath="/home/$user/ConanServer"
SteamCmdPath="/home/$user/steamcmd"
SteamPath="/home/$user/Steam"
discordScript="discord_bot_main.py"

# Server configuration
IP="37.59.45.211"
Port="7777"
QueryPort="27015"
Server_Name="[EU/FR] Akylonia.net | XP x2 | NoRules | Wipe 17.02"
Server_Password="" # Leaves "" if you don't want to use a password

# Discord Bot configuration
discordBotEnable=false
botToken=
channelID=
announceTimer=2 # in minutes

# Do not modify
ScriptVersion=6
RED='\033[0;31m'
NC='\033[0m'

#########################################################

if [ -f "/bin/conan" ]; then
	mypwd=$(pwd)
	echo -e "Creating symbolic link: ${RED}\"ln -s $mypwd/conan /bin/conan\"${NC}\n"
	echo -e "You can now use \"conan <cmd>\" everywhere"
	sudo ln -s conan /bin/conan
fi

function conan_start {

echo "Starting server..."

isServerDown=$(ps axf | grep ConanSandboxServer-Win64-Test.exe | grep -v grep)

if [ -z "$isServerDown" ]; then
	screen -dmS conan bash -c 'wine "$ConanPath/ConanSandboxServer.exe" "ConanSandbox?MULTIHOME=$IP?listen?" -log -Port="$Port" -QueryPort="$QueryPort" -ServerName=$Server_Name -ServerPassword=$Server_Password'
	echo "[V] Server is now up"
	echo "Use \"conan screen\" to watch logs"

	if [ $discordBotEnable = true]; then
		echo "[V] Discord Bot is enable"
		if [ -n "$botToken" ] && [ -n "$channelID"]; then
			python3 $discordScript $botToken $channelID "The server is being launched and will be available in a few moments"
		else
			echo "[X] No Discord botToken or channelID found."
		fi
	fi
else
	echo "[X] Server is already up, no restart required"
fi
}

function conan_stop {

pid=$(ps axf | grep ConanSandboxServer-Win64-Test.exe | grep -v grep | awk '{print $1}')

if [ -z "$pid" ]; then
	echo "[X] There's no server to stop"
else
		if [ "$discordBotEnable" = true ]; then
			echo "[V] Discord Bot is enable"
			if [ -n "$botToken" ] && [ -n "$channelID"]; then
				secLeft = $announceTimer * 60

				while [ "$secLeft" -gt "0" ]; do
					minLeft=$secLeft / 60
					python3 $discordScript $botToken $channelID "The server will be shut down in" $minLeft "minutes."
					secLeft-=60
					sleep 60
				done	
			else
				echo "[X] No Discord botToken or channelID found."
			fi
		fi

        echo "[V] Existing PIDs: $pid"
		exec kill -SIGINT $pid

        cpt=15
        while [ "$cpt" -gt 0 ]; do
                echo "Shutting down... $cpt"
                sleep 1
                let cpt=cpt-1
        done
        echo "[V] Server is now shutdown"
fi
}

function conan_update {

echo "Deleting appcache..."
rm -rf $SteamPath/appcache/

# Pull new info and compare new timestamp to saved timestamp
# You may need to initially run the command for currentTimestamp manually and redirect it to $ConanPath/lastUpdate
echo "Checking for last update..."
currentTimestamp=$($SteamCmdPath/steamcmd.sh +login anonymous +app_info_update 1 +app_info_print 443030 +quit | grep -EA 1000 "^\s+\"branches\"$" | grep -EA 5 "^\s+\"public\"$" | grep -m 1 -EB 10 "^\s+}" | grep -E "^\s+\"timeupdated\"\s+" | tr '[:blank:]"' ' ' | awk '{print $2}')
lastTimestamp=$(cat $ConanPath/lastUpdate)

if [ "$currentTimestamp" -gt "$lastTimestamp" ]; then
	echo "[V] New update found"

	if [ "$discordBotEnable" = true]; then

	fi
    stop
	
	echo "Deleting appcache..."
	rm -rf $SteamPath/appcache/
	$SteamCmdPath/steamcmd.sh +@sSteamCmdForcePlatformType windows +force_install_dir $ConanPath +login anonymous +app_update 443030 validate +quit

	echo "[V] Update finished"
    echo "$currentTimestamp" > $ConanPath/lastUpdate

	start
else
    echo "[X] No update found"
fi
}

function conan_show {

exec screen -ls
}

function conan_screen {

exec screen -r $1
}

function conan_install {

echo "Starting installation."
echo -e "${RED}THIS PART NEED ROOT ACCESS${NC}\n"

echo -e "${RED}Creating user...${NC}"
if [ -z "$user" ]; then
	echo "[?] Please enter a name for your Conan Exiles user. You can provide an existing user"
	read user
fi

while [ -z "$(getent passwd $user)" ]; do
	sudo adduser $user
	if [ -z "$(getent passwd $user)"]; then
		echo -e "${RED}Creation failed, try again${NC}\n"
	fi
done

echo -e "${RED}User \"$user\" found...${NC}\n"

echo -e "${RED}[SKIP] Setting up iptables...${NC}\n"

iptables -t filter -I INPUT -p udp --dport $Port -j ACCEPT
iptables -t filter -I INPUT -p udp --dport $QueryPort -j ACCEPT
iptables -t filter -I INPUT -p udp --dport 7778 -j ACCEPT


echo -e "${RED}Installing screen...\n${NC}"
sudo apt-get install screen

echo -e "${RED}\nUpdating repository...${NC}"
sudo add-apt-repository ppa:ricotz/unstable
sudo apt remove wine wine1.8 wine-stable libwine* fonts-wine* && sudo apt autoremove
sudo apt update

echo -e "${RED}\nInstalling wine2.0...${NC}"
sudo apt install wine2.0

dpkg-query -l wine2.0
if [ $? -eq 1 ]; then
	echo -e "${RED}\n[ERROR] Wine2.0 is not installed, server may not work.${NC}"
	sleep 2
fi

echo -e "${RED}\nInstalling SteamCMD...${NC}"
if [ -z "$SteamCmdPath" ]; then
	echo "[?] Please enter /path/for/steamCMD (i.e. \"/home/steam/steamcmd\"). You can provide an existing linux version of SteamCMD"
	read SteamCmdPath
fi

if  [ ! -f "$SteamCmdPath/steamcmd.sh" ]; then
	echo -e "\n$SteamCmdPath seems not to exist."
	read -r -p "Do you want to install SteamCMD ? [y/N] " response
	case "$response" in
    	[yY][eE][sS]|[yY]) 
			echo -e "${RED}\nDownloading SteamCMD...${NC}"
			echo -e "Please enter your ${RED}\"$user\"${NC} password"
			su -m $user -c "mkdir -p $SteamCmdPath && cd $SteamCmdPath && wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz && tar -xvzf steamcmd_linux.tar.gz && rm -rf steamcmd_linux.tar.gz"
       		;;

       	*)
			echo -e "${RED}Exiting installation...${NC}"
			exit 1
			;;
	esac		
fi

echo -e "\n${RED}Downloading lastest version of Conan Exiles Server...${NC}"
echo -e "Please enter your ${RED}\"$user\"${NC} password"

su -c "$SteamCmdPath/steamcmd.sh +@sSteamCmdForcePlatformType windows +force_install_dir $ConanPath +login anonymous +app_update 443030 validate +quit" -m $user

echo -e "\n${RED}Creating timestamp for updates...${NC}"
currentTimestamp=$($SteamCmdPath/steamcmd.sh +login anonymous +app_info_update 1 +app_info_print 443030 +quit | grep -EA 1000 "^\s+\"branches\"$" | grep -EA 5 "^\s+\"public\"$" | grep -m 1 -EB 10 "^\s+}" | grep -E "^\s+\"timeupdated\"\s+" | tr '[:blank:]"' ' ' | awk '{print $2}')
echo -e "Please enter your ${RED}\"$user\"${NC} password"
su -m $user -c "touch $ConanPath/lastUpdate && echo "$currentTimestamp" > $ConanPath/lastUpdate"

echo -e "\nYour Conan Exiles server is now fully installed. You can now use:"
echo -e "${RED}\"conan start\"${NC} to run your server" | indent
echo -e "${RED}\"conan crontab\"${NC} to set up an auto-restarter/updater" | indent
echo -e "${RED}\"conan discord\"${NC} to set up a Discord Bot which announce server status" | indent
}

function conan_crontab {

	tmp=crontab_tmp
	re='^[0-9]+$'

	echo -e "Enable ${RED}auto-restart${NC} ? (checks if there's no server running and start if needed). Enter a number of minutes between checks (0 to disable)"
	read restartTime

	if ! [[ $restartTime =~ $re ]]; then
		restartTime=5
		echo -e "Invalid value. Set${RED} $restartTime ${NC}mn by default"
	fi
	
	if [ ! "$restartTime" -eq 0 ]; then
		echo -e "${RED}Crontab:${NC} */$restartTime * * * * conan start"
		sudo crontab -u $user -l > $tmp
		sudo echo "*/$restartTime * * * * conan start" >> $tmp
		sudo crontab -u $user $tmp
		sudo rm $tmp
	fi
	
	echo -e "Enable ${RED}auto-updater${NC} ? (checks for update and if needed, apply and restart server). Enter a number of minutes between checks (0 to disable)"
	read updateTime

	if ! [[ $updateTime =~ $re ]]; then
		updateTime=10
		echo -e "Invalid value. Set${RED} $updateTime ${NC}mn by default"
	fi

	if [ ! "$updateTime" -eq 0 ]; then
		echo -e "${RED}Crontab:${NC} */$updateTime * * * * conan update"
		sudo crontab -u $user -l > $tmp
		sudo echo "*/$updateTime * * * * conan update" >> $tmp
		sudo crontab -u $user $tmp
		sudo rm $tmp
	fi

}

function conan_discord {

	echo -e "Installing ${RED}Discord Bot${NC}. Before continuing, create a Discord Bot and add it on your server by following this tutorial: "
	echo -e "${RED}https://github.com/reactiflux/discord-irc/wiki/Creating-a-discord-bot-&-getting-a-token${NC}"

	if [ -z "$botToken" ]
		echo -e "Please insert your ${RED}botToken: ${NC}"
		read botToken
		echo -e "Don't forget to set it in conan script"

	if [ -z "$channelID"]
		echo -e "Please insert your ${RED}channelID: ${NC}"
		read channelID
		echo -e "Don't forget to set it in conan script"

	echo -e "${RED}\nInstalling Python3...${NC}"
	sudo apt-get install python3 python3-pip

	echo -e "${RED}\nInstalling Python3/Discord requirements...${NC}"
	python3 -m pip install --upgrade pip
	python3 -m pip install websockets aiohttp
	python3 -m pip install -U discord.py

	echo -e "${RED}\nTesting configuration...${NC}"
	python3 $discordScript $botToken $channelID "Hello" "World" "-" "Configuration SUCCESS"
}

function indent { sed -e 's/^/\t/'; }

function conan_help {

echo "Script for managing a Conan Exiles server on Linux (v. $ScriptVersion)"
echo "Made by Slymp, tested on Ubuntu 16.04"
echo -e "Join us on ${RED}http://akylonia.net${NC} or ${RED}discord.gg/7zbWQzU${NC}"

echo -e "\nAvailable commands:"
echo -e "start\t\t: Starts server. Checks for servers already running" | indent
echo -e "stop\t\t: Stops safely servers by sending a SIGINT" | indent
echo -e "update\t\t: Apply a pending update. Closes and restarts the servers properly" | indent
echo -e "show\t\t: Display running servers and their id" | indent
echo -e "screen [id]\t: Display console. Use ${RED}\"Ctrl + A D\"${NC} to quit the screen without shutting down the server" | indent
echo ""
echo -e "[!] Be careful, ${RED}leaving a screen with Ctrl + C force your server to crash without saving${NC}, which can heavily corrupt your database\n" | indent
}

case "$1" in
    start) conan_start ;;
    stop) conan_stop ;;
    update) conan_update ;;
    show) conan_show ;;
    screen) conan_screen ;;
    help) conan_help ;;
    install) conan_install ;;
    crontab) conan_crontab ;;
	discord) conan_discord ;;

    *) echo "Command not found: \"$1\": use \"conan help\" to get more informations"
esac