#!/bin/bash

# Script made by Slymp for Akylonia.net
# Join us on discord.gg/7zbWQzU

# Configuration paths
user="steam"
ConanPath="/home/$user/ConanServer"
SteamCmdPath="/home/$user/steamcmd"
SteamPath="/home/$user/Steam"
discordScript="discord_bot.py"

# Server configuration
IP="YourIp"
Port="7777"
QueryPort="27015"
Server_Name="YourServerName"

# RaidHours configuration
raidHoursEnable=false
raidHoursStart=19				# Players will be able to raid from 7PM
raidHoursDuration=5				# for 5 hours: until midnight

raidOnString="raiding will be ON for $raidHoursDuration hours, right after the reboot"
raidOffString="raiding will be OFF right after the reboot. See you tomorrow at $raidHoursStart boys"

# Discord Bot configuration
discordBotEnable=false
botToken="YourBotToken"
channelID="YourChannelId"
delayBeforeShutdown=0 			# in minutes

# Do not modify
ScriptVersion=8
RED='\033[0;31m'
NC='\033[0m'
logDate=$(date +"%T")

#########################################################

function conan_start {

echo "[$logDate] Starting server..."

isServerDown=$(ps axf | grep ConanSandboxServer-Win64-Test.exe | grep -v grep)
if [ "$1" == "wait" ]; then
	cpt=0
	while [ ! -z "$isServerDown" ] && [ $cpt -lt 600 ]; do
		echo "[$logDate][WAIT] A server is running, waiting... $cpt"
		((cpt++))
		sleep 1
		isServerDown=$(ps axf | grep ConanSandboxServer-Win64-Test.exe | grep -v grep)
	done
	sleep 5
fi

if [ -z "$isServerDown" ]; then
	screen -dmS conan bash -c "wine $ConanPath/ConanSandboxServer.exe ConanSandbox?MULTIHOME=$IP?listen? -log -Port=$Port -QueryPort=$QueryPort -ServerName=\"$Server_Name\""
	echo "[$logDate][SUCCESS] Server is now up"
	echo "Use \"conan screen\" to watch logs"

	if [ $discordBotEnable = true ]; then
		echo "[$logDate][SUCCESS] Discord Bot is enable"
		if [ -n "$botToken" ] && [ -n "$channelID" ]; then
			python3 $discordScript $botToken $channelID "The server is being launched and will be available in a few moments."
		else
			echo "[$logDate][ERROR] No Discord botToken or channelID found"
		fi
	fi
else
	echo "[$logDate][FAILED] A server is already up, no restart required"
fi
}

function conan_reboot {

	if [ $discordBotEnable = true ]; then
		echo "[$logDate][SUCCESS] Discord Bot is enable"
		if [ -n "$botToken" ] && [ -n "$channelID" ]; then
			if [ -n "$1" ]; then
				python3 $discordScript $botToken $channelID "@everyone The server is going to reboot. Reason: $@."
			else
				python3 $discordScript $botToken $channelID "@everyone The server is going to reboot."
			fi
		else
			echo "[$logDate][ERROR] No Discord botToken or channelID found"
		fi
	fi

	echo "[$logDate][SUCCESS] Server is going to reboot"
	conan_stop
	conan_start wait
}

function conan_stop {

pid=$(ps axf | grep ConanSandboxServer-Win64-Test.exe | grep -v grep | awk '{print $1}')

if [ -z "$pid" ]; then
	echo "[$logDate][FAILED] There's no server to stop"
else
		if [ "$discordBotEnable" = true ]; then
			echo "[$logDate][SUCCESS] Discord Bot is enable"
			if [ -n "$botToken" ] && [ -n "$channelID" ]; then
				secLeft=$(($delayBeforeShutdown * 60))

				while [ $secLeft -gt "0" ]; do
					minLeft=$(($secLeft / 60))
					echo "[$logDate][WAIT] Server will be shut down in $minLeft minutes"
					python3 $discordScript $botToken $channelID "The server will be shut down in" $minLeft "minutes."
					secLeft=$(($secLeft - 60))
					sleep 60
				done
				python3 $discordScript $botToken $channelID "The server is shutting down."
			else
				echo "[$logDate][ERROR] No Discord botToken or channelID found"
			fi
		fi

        echo "[$logDate][SUCCESS] Existing PIDs: $pid"
		kill -SIGINT $pid

		isServerDown=$(ps axf | grep ConanSandboxServer-Win64-Test.exe | grep -v grep)
        cpt=0
		while [ ! -z "$isServerDown" ]; do
			echo "[$logDate][WAIT] Server is stopping, waiting..."
			((cpt++))
			sleep 1
		isServerDown=$(ps axf | grep ConanSandboxServer-Win64-Test.exe | grep -v grep)
		done
        echo "[$logDate][SUCCESS] Server stopped in $cpt seconds"

        if [ "$discordBotEnable" = true ]; then
			echo "[$logDate][SUCCESS] Discord Bot is enable"
			if [ -n "$botToken" ] && [ -n "$channelID" ]; then
				python3 $discordScript $botToken $channelID "The server shutted down in $cpt seconds."
			else
				echo "[$logDate][ERROR] No Discord botToken or channelID found"
			fi
		fi
fi
}

function conan_update {

echo "[$logDate] Deleting appcache..."
rm -rf $SteamPath/appcache/

# Pull new info and compare new timestamp to saved timestamp
# You may need to initially run the command for currentTimestamp manually and redirect it to $ConanPath/lastUpdate
echo "[$logDate] Checking for last update..."
currentTimestamp=$($SteamCmdPath/steamcmd.sh +login anonymous +app_info_update 1 +app_info_print 443030 +quit | grep -EA 1000 "^\s+\"branches\"$" | grep -EA 5 "^\s+\"public\"$" | grep -m 1 -EB 10 "^\s+}" | grep -E "^\s+\"timeupdated\"\s+" | tr '[:blank:]"' ' ' | awk '{print $2}')
lastTimestamp=$(cat $ConanPath/lastUpdate)

if [ "$currentTimestamp" -gt "$lastTimestamp" ]; then
	echo "[$logDate][SUCCESS] New update found"

	if [ "$discordBotEnable" = true ]; then
		echo "[$logDate][SUCCESS] Discord Bot is enable"
		if [ -n "$botToken" ] && [ -n "$channelID" ]; then
			python3 $discordScript $botToken $channelID "@everyone A new official update have been found, server is going to reboot. Please restart your game to apply the patch."
		else
			echo "[$logDate][ERROR] No Discord botToken or channelID found."
		fi
	fi
    conan_stop
	echo "[$logDate] Deleting appcache..."
	rm -rf $SteamPath/appcache/
	$SteamCmdPath/steamcmd.sh +@sSteamCmdForcePlatformType windows +force_install_dir $ConanPath +login anonymous +app_update 443030 validate +quit

	echo "[$logDate][SUCCESS] Update finished"
    echo "$currentTimestamp" > $ConanPath/lastUpdate
	conan_start
else
    echo "[$logDate][FAILED] No update found"
fi
}

function conan_show {

screen -ls
}

function conan_screen {

screen -r $1
}

function conan_install {

echo "Starting installation."
echo -e "${RED}THIS PART NEED ROOT ACCESS${NC}\n"

echo -e "${RED}Creating user...${NC}"
if [ -z "$user" ]; then
	echo "[?] Please enter a name for your Conan Exiles user. You can provide an existing user"
	read user
fi

while [ -z "$(getent passwd $user)" ]; do
	sudo adduser $user
	if [ -z "$(getent passwd $user)" ]; then
		echo -e "${RED}Creation failed, try again${NC}\n"
	fi
done

echo -e "${RED}User \"$user\" found...${NC}\n"

echo -e "${RED}[SKIP] Setting up iptables...${NC}\n"

sudo iptables -t filter -I INPUT -p udp --dport $Port -j ACCEPT
sudo iptables -t filter -I INPUT -p udp --dport $QueryPort -j ACCEPT
sudo iptables -t filter -I INPUT -p udp --dport 7778 -j ACCEPT 			# Used by wine, as far as I know


echo -e "${RED}Installing screen...\n${NC}"
sudo apt-get install screen

echo -e "${RED}\nUpdating repository...${NC}"
sudo add-apt-repository ppa:ricotz/unstable
sudo apt remove wine wine1.8 wine-stable libwine* fonts-wine* && sudo apt autoremove
sudo apt update

echo -e "${RED}\nInstalling wine2.0...${NC}"
sudo apt install wine2.0 wine-gecko*

echo -e "${RED}\nInstalling winetricks...${NC}"
sudo wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
sudo chown "$user": winetricks
winetricks vcrun2015

if [ $? -eq 1 ]; then
	echo -e "${RED}\n[ERROR] Wine2.0 is not installed, server may not work.${NC}"
	sleep 2
fi

echo -e "${RED}\nInstalling SteamCMD...${NC}"
if [ -z "$SteamCmdPath" ]; then
	echo "[?] Please enter /path/for/steamCMD (i.e. \"/home/steam/steamcmd\"). You can provide an existing linux version of SteamCMD"
	read SteamCmdPath
fi

if  [ ! -f "$SteamCmdPath/steamcmd.sh" ]; then
	echo -e "\n$SteamCmdPath seems not to exist."
	read -r -p "Do you want to install SteamCMD ? [y/N] " response
	case "$response" in
    	[yY][eE][sS]|[yY])
			echo -e "${RED}\nDownloading SteamCMD...${NC}"
			echo -e "Please enter your ${RED}\"$user\"${NC} password"
			su -m $user -c "mkdir -p $SteamCmdPath && cd $SteamCmdPath && wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz && tar -xvzf steamcmd_linux.tar.gz && rm -rf steamcmd_linux.tar.gz"
       		;;

       	*)
			echo -e "${RED}Exiting installation...${NC}"
			exit 1
			;;
	esac
fi

echo -e "\n${RED}Downloading lastest version of Conan Exiles Server...${NC}"

echo -e "Please enter your ${RED}\"$user\"${NC} password"
su -c "$SteamCmdPath/steamcmd.sh +@sSteamCmdForcePlatformType windows +force_install_dir $ConanPath +login anonymous +app_update 443030 validate +quit" -m $user

echo -e "\n${RED}Creating timestamp for updates...${NC}"
currentTimestamp=$($SteamCmdPath/steamcmd.sh +login anonymous +app_info_update 1 +app_info_print 443030 +quit | grep -EA 1000 "^\s+\"branches\"$" | grep -EA 5 "^\s+\"public\"$" | grep -m 1 -EB 10 "^\s+}" | grep -E "^\s+\"timeupdated\"\s+" | tr '[:blank:]"' ' ' | awk '{print $2}')

echo -e "Please enter your ${RED}\"$user\"${NC} password"
su -m $user -c "touch $ConanPath/lastUpdate && echo "$currentTimestamp" > $ConanPath/lastUpdate"

echo -e "\nYour Conan Exiles server is now fully installed. You can now use:"
echo -e "${RED}\"conan start\"${NC} to run your server" | indent
echo -e "${RED}\"conan crontab\"${NC} to set up an auto-restarter/updater" | indent
echo -e "${RED}\"conan discord\"${NC} to set up a Discord Bot which announce server status" | indent
}

function conan_crontab {

	tmp=crontab_tmp
	re='^[0-9]+$'
	logsDate=$(date +"%d-%m-%y")

	mkdir /home/$user/logs

	echo -e "Enable ${RED}auto-restart${NC} ? (checks if there's no server running and start if needed). Enter a number of minutes between checks (0 to disable)"
	read restartTime

	if ! [[ $restartTime =~ $re ]]; then
		restartTime=5
		echo -e "Invalid value. Set${RED} $restartTime ${NC}mn by default"
	fi

	if [ ! "$restartTime" -eq 0 ]; then
		echo -e "${RED}Crontab:${NC} */$restartTime * * * * conan start >> /home/$user/logs/auto_restarter_$logsDate.log"
		crontab -u $user -l > $tmp
		echo "*/$restartTime * * * * conan start >> /home/$user/logs/auto_restarter_$logsDate.log" >> $tmp
		crontab -u $user $tmp
		rm $tmp
	fi

	echo -e "Enable ${RED}auto-updater${NC} ? (checks for update and if needed, apply and restart server). Enter a number of minutes between checks (0 to disable)"
	read updateTime

	if ! [[ $updateTime =~ $re ]]; then
		updateTime=2
		echo -e "Invalid value. Set${RED} $updateTime ${NC}mn by default"
	fi

	if [ ! "$updateTime" -eq 0 ]; then
		echo -e "${RED}Crontab:${NC} */$updateTime * * * * conan update >> /home/$user/logs/auto_updater_$logsDate.log"
		crontab -u $user -l > $tmp
		echo "*/$updateTime * * * * conan update >> /home/$user/logs/auto_updater_$logsDate.log" >> $tmp
		crontab -u $user $tmp
		rm $tmp
	fi

	echo -e "Enable ${RED}RaidHours${NC} ? (Player won't be able to destroy other buildings when Raids are disable). Enter a number of minutes between checks (0 to disable)"
	read raidHoursTime

	if ! [[ $raidHoursTime =~ $re ]]; then
		raidHoursTime=3
		echo -e "Invalid value. Set${RED} $raidHoursTime ${NC}mn by default"
	fi

	if [ ! "$raidHoursTime" -eq 0 ]; then
		echo -e "${RED}Crontab:${NC} */$raidHoursTime * * * * conan raidhours >> /home/$user/logs/auto_raidhours_$logsDate.log"
		crontab -u $user -l > $tmp
		echo "*/$raidHoursTime * * * * conan raidhours >> /home/$user/logs/auto_raidhours_$logsDate.log" >> $tmp
		crontab -u $user $tmp
		rm $tmp
	fi
}

function conan_discord {
	echo -e "${RED}THIS PART NEED ROOT ACCESS${NC}\n"

	echo -e "Installing ${RED}Discord Bot${NC}. Before continuing, create a Discord Bot and add it on your server by following this tutorial: "
	echo -e "${RED}https://github.com/reactiflux/discord-irc/wiki/Creating-a-discord-bot-&-getting-a-token${NC}"

	if [ -z "$botToken" ]; then
		echo -e "Please insert your ${RED}botToken: ${NC}"
		read botToken
		echo -e "Don't forget to set it in conan script"
	fi

	if [ -z "$channelID" ]; then
		echo -e "Please insert your ${RED}channelID: ${NC}"
		read channelID
		echo -e "Don't forget to set it in conan script"
	fi

	echo -e "${RED}\nInstalling Python3...${NC}"
	sudo apt-get install python3 python3-pip

	echo -e "${RED}\nInstalling Python3/Discord requirements...${NC}"
	sudo python3 -m pip install --upgrade pip
	sudo python3 -m pip install -U discord.pendingy

	echo -e "${RED}\nTesting configuration...${NC}"
	sudo python3 $discordScript $botToken $channelID "Hello" "World" "-" "Configuration SUCCESS"
}

function conan_raidhours {
	if [ "$raidHoursEnable" = true ]; then
		currentHour=$(echo $(date +"%H"))
		raidHoursEnd=$((raidHoursStart + $raidHoursDuration))

		grep -q "CanDamagePlayerOwnedStructures=False" "$ConanPath/ConanSandbox/Saved/Config/WindowsServer/ServerSettings.ini"
		isRaidDisableInFile=$?

		if (("$currentHour" >= "$raidHoursStart")) && (("$currentHour" < "$raidHoursEnd")); then
			if [ $isRaidDisableInFile -eq 0 ]; then
				lineInFile="$(grep -n "CanDamagePlayerOwnedStructures=False" "$ConanPath/ConanSandbox/Saved/Config/WindowsServer/ServerSettings.ini" | grep -Eo '^[^:]+')"

				if [ -z "$lineInFile" ]; then
					echo "[$logDate][ERROR] Variable is not in file, adding at end"
					echo "CanDamagePlayerOwnedStructures=True" >> $ConanPath/ConanSandbox/Saved/Config/WindowsServer/ServerSettings.ini
				else
					echo "[$logDate][SUCCESS] Raid is disable in file (line $lineInFile)"
					sed -i "${lineInFile}s/.*/CanDamagePlayerOwnedStructures=True/" $ConanPath/ConanSandbox/Saved/Config/WindowsServer/ServerSettings.ini
				fi
				conan_reboot "$raidOnString"
			else
				echo "[$logDate][FAILED] Nothing to do"
			fi
		else
			if [ $isRaidDisableInFile -eq 1 ]; then
				lineInFile="$(grep -n "CanDamagePlayerOwnedStructures=True" "$ConanPath/ConanSandbox/Saved/Config/WindowsServer/ServerSettings.ini" | grep -Eo '^[^:]+')"

				if [ -z "$lineInFile" ]; then
					echo "[$logDate][ERROR] Variable is not in file, adding at end"
					echo "CanDamagePlayerOwnedStructures=False" >> $ConanPath/ConanSandbox/Saved/Config/WindowsServer/ServerSettings.ini
				else
					echo "[$logDate][SUCCESS] Raid is enable in file (line $lineInFile)"
					sed -i "${lineInFile}s/.*/CanDamagePlayerOwnedStructures=False/" $ConanPath/ConanSandbox/Saved/Config/WindowsServer/ServerSettings.ini
				fi
				conan_reboot "$raidOffString"
			else
				echo "[$logDate][FAILED] Nothing to do"
			fi
		fi
	else
		echo "[$logDate][ERROR] RaidHours are disabled"
	fi
}
.
function indent { sed -e 's/^/\t/'; }

function conan_help {

echo "Script for administering a Conan Exiles server on Linux (v0.$ScriptVersion)"
echo "Made by Slymp, tested on Ubuntu 16.04"
echo -e "Join us on ${RED}http://akylonia.net${NC} or ${RED}discord.gg/7zbWQzU${NC}"

echo -e "\nAvailable commands:"
echo -e "start\t\t: Start the server. Don't do anything if a server is running." | indent
echo -e "stop\t\t: Shutdown the server cleanly by sending a SIGINT to the screen." | indent
echo -e "reboot [reason]\t: Restart the server securely. You can specify a message to send with your Discord Bot." | indent
echo -e "update\t\t: Check for available updates. If needed, close the server, apply the update and restart." | indent
echo -e "show\t\t: Display running server(s)." | indent
echo -e "screen [id]\t: Display the server console to look at your server logs. Use ${RED}\"Ctrl + A\"${NC} then ${RED}\"Ctrl + D\"${NC} to leave the screen without stopping the server." | indent
echo -e "install\t\t: Installs the whole server and dependencies" | indent
echo -e "discord\t\t: Install a Discord Bot which will announce server status" | indent
echo -e "raidhours\t: Enable a daily period where raids are possible. You need to configure the script and run \"conan crontab\"" | indent
echo -e "crontab\t\t: Enable crontabs to automate the management of your server." | indent
echo ""
echo -e "[!] Be careful, ${RED}leaving a screen with Ctrl + C force your server to crash without saving${NC}, which can heavily corrupt your database\n" | indent
}

case "$1" in
	start) conan_start $2 ;;
	stop) conan_stop ;;
	reboot) conan_reboot $2 ;;
	update) conan_update ;;
	show) conan_show ;;
	screen) conan_screen ;;
	install) conan_install ;;
	crontab) conan_crontab ;;
	discord) conan_discord ;;
	raidhours) conan_raidhours ;;
    help) conan_help ;;

    *) echo "Command not found: \"$1\": use \"conan help\" to get more informations"
esac
